#!/bin/bash

# psh -- parallel shells

# TODO: consider option for `mosh` rather than `ssh`

psh () {
    local command=
    local debug=
    local error=
    local machine=
    local machines=
    local open=
    local opt=
    local pane=
    local target=
    local title=

    while getopts ":c:dm:op:" opt ; do
        case $opt in
            c) cut=$OPTARG ;;
            d) debug=true ;;
            m) machines="$machines $(tr , " " <<< $OPTARG)" ;;
            o) open=true ;;
            p) pane=$OPTARG ;;
            :) error="missing required argument for option: -$OPTARG" ;;
            \?) error="illegal option: $OPTARG" ;;
        esac
    done
    shift $((OPTIND - 1)) ; OPTIND=1

    if [ -z "$error" -a -z "$machines" ] ; then
        error="which hosts?"
    fi

    if [ -n "$error" ] ; then
        echo >&2 $error
        echo >&2 "usage: ${0##*/} [-d] [-o] [-m MACHINE1,MACHINE2] [-p PANENAME] [command arg1 arg2]"
        return 2
    fi

    command="$@"

    if [ $# -gt 0 -a -n "$open" ] ; then
        # user requests a login shell upon completion of requested command
        command="$command ; exec /bin/bash -l"
    fi

    for machine in $machines ; do
        if [ -n "$debug" ] ; then
            echo "ssh -t $machine \"$command\""
            continue
        fi

        title=${machine%$cut} # remove optionally specified suffix from machine name

        if [ -n "$TMUX" ] ; then
            if [ -n "$pane" ] ; then
                if [ -z "$target" ] ; then
                    # create new window, saving target name
                    target=$(tmux new-window -P -c $HOME -d -n $pane ssh -t $machine "$command")
                    tmux set-option -t $target -w synchronize-panes on
                elif ! tmux split-window -c $HOME -t $target ssh -t $machine "$command" 2>/dev/null ; then
                    # NOTE: cannot split-window when too small, so re-tile panes in window and try again
                    tmux select-layout -t $target tiled
                    tmux split-window -c $HOME -t $target ssh -t $machine "$command"
                fi
            else
                tmux new-window -c $HOME -d -n "$title" ssh -t $machine "$command"
            fi
        elif [ "$TERM_PROGRAM" == "iTerm.app" ] ; then
            # create new window?
            # create new tab?
            # create new pane (iTerm session)?
            # ssh

            # more than one host?
            # create new window for everything, or create new tab for everything together, or create new tab for each host?
            # if create new window for everything, do we create new tab, or split tab into grid for each host?
            # if create new tab for everything, split tab into grid for each host.
            # if create new tab for each host seperate


            osascript \
                -e 'tell application "iTerm2"' \
                -e "  create window with default profile command \"ssh -t $machine \\\"$command\\\"\"" \
                -e 'end tell'


            # if [ -n "$pane"] ; then
            #     # create new window and fill with a bunch of panes (need to name it with osascript)
            #     osascript \
                #         -e 'tell application "iTerm2"' \
                #         -e '  create window with default profile' \
                #         -e 'end tell'
            # else
            #     # create new window for each $machine
            #     osascript \
                #         -e 'tell application "iTerm2"' \
                #         -e '  create window with default profile' \
                #         -e '  tell current window' \
                #         -e '    create tab with default profile' \
                #         -e "    do script \"ssh -t $machine \\\"$command\\\"\" in front window" \
                #         -e '  end tell' \
                #         -e 'end tell'
            # fi

            # osascript \
                #     -e "tell application \"iTerm2\"" \
                #     -e "tell application \"System Events\" to keystroke \"t\" using {command down}" \
                #     -e "tell application \"iTerm2\" to tell session -1 of current terminal to write text \"ssh -t $machine \\\"$command\\\"\"" \
                #     -e "end tell" > /dev/null

        elif [ "$TERM" == "screen" ] ; then
            screen -t "$title" ssh -t $machine "$command"
        elif [ "$TERM_PROGRAM" == "Apple_Terminal" ] ; then
            osascript \
                -e "tell application \"Terminal\"" \
                -e "tell application \"System Events\" to keystroke \"t\" using {command down}" \
                -e "do script \"ssh -t $machine \\\"$command\\\"\" in front window" \
                -e "end tell" > /dev/null
        else
            ssh -t $machine "$command"
        fi
    done

    if [ -z "$debug" -a -n "$TMUX" -a -n "$pane" ] ; then
        # NOTE: Re-tile the panes in the tmux window
        tmux select-layout -t $target tiled
    fi
}

case $# in
    0) : ;;
    *) psh "$@" ;;
esac
